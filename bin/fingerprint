#!/usr/bin/env ruby

# Copyright (c) 2011 Samuel G. D. Williams. <http://www.oriontransfer.co.nz>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'optparse'
require 'pathname'
require 'fingerprint'

OPTIONS = {
	:root => "./",
	:mode => :scan,
	:output => nil,
	:verbose => false,
	:force => false,
	:name => "._fingerprint.txt"
}

ARGV.options do |o|
	script_name = File.basename($0)

	o.banner = "Usage: #{script_name} [options] [path]"
	o.define_head "This script is used to calculate and compare a basic file system fingerprint."

	o.separator ""
	o.separator "Directory analysis and verification:"
	
	o.on("--analyze [path]", String, "Generage a fingerprint of the given path and save it for later verification.") do |path|
		OPTIONS[:mode] = :analyze
		OPTIONS[:root] = path
	end
	
	o.on("--verify [path]", String, "Verify a given path based on a previously saved fingerprint.") do |path|
		OPTIONS[:mode] = :verify
		OPTIONS[:root] = path
	end
	
	o.on("-n name", String, "Specify the name of the fingerprint file (default #{OPTIONS[:name]}).") do |name|
		OPTIONS[:name] = name
	end
	
	o.on("-f", "Force any operation to complete despite warnings.") do
		OPTIONS[:force] = true
	end
	
	o.separator ""
	o.separator "Low level operations:"

	o.on("-c", "Compare the given fingerprints. Check that the second fingerprint is a superset of the first.") do
		 OPTIONS[:mode] = :check
	end
	
	o.on("-o [output-path]", String, "Write the fingerprint output to the given file.") do |path|
		OPTIONS[:output] = File.open(path, "w")
	end
	
	o.on("--verbose", "Verbose output, include additional details in the file transcript.") do
		OPTIONS[:verbose] = true
	end

	o.separator ""
	o.separator "Help and Copyright information:"

	o.on_tail("--copy", "Display copyright information") {
		$stderr.puts "#{script_name} v#{Fingerprint::VERSION::STRING}. Copyright (c) 2011 Samuel Williams. Released under the MIT license."
		$stderr.puts "See http://www.oriontransfer.co.nz/ for more information."

		exit
	}

	o.on_tail("-h", "--help", "Show this help message.") { $stderr.puts o; exit }
end.parse!

unless File.directory? OPTIONS[:root]
	$stderr.puts "Path #{OPTIONS[:root]} doesn't exist!"
	exit(255)
end

case (OPTIONS[:mode])
	when :analyze
		output_file = Pathname.new(OPTIONS[:root]) + OPTIONS[:name]
		
		if output_file.exist? && !OPTIONS[:force]
			$stderr.puts "Output file #{output_file} already exists. Aborting."
			exit(2)
		end
		
		options = {}
		options[:verbose] = true if OPTIONS[:verbose]
		
		File.open(output_file, "w") do |io|
			options[:output] = io
			
			Fingerprint::Scanner.scan_paths([OPTIONS[:root]], options)
		end
	when :verify
		error_count = 0
		
		input_file = Pathname.new(OPTIONS[:root]) + OPTIONS[:name]
		
		unless File.exist? input_file
			$stderr.puts "Can't find index #{input_file}. Aborting."
			exit(3)
		end
		
		scanner = Fingerprint::Scanner.scan_paths([OPTIONS[:root]])
		scanner.output.seek(0)
		
		File.open(input_file, "r") do |io|
			error_count += Fingerprint::Checker.check_files(io, scanner.output)
		end
		
		if error_count == 0
			$stderr.puts "Data verified, 0 errors found."
			exit(0)
		else
			$stderr.puts "Data inconsistent, #{error_count} errors found!"
			exit(1)
		end
	when :scan
		roots = ARGV
		roots << Dir.pwd if roots.size == 0
		
		# Check that all supplied paths exist
		roots.delete_if do |root|
			if File.exist? root
				false
			else
				$stderr.puts "Path #{root} doesn't exist, skipping!"
				true
			end
		end
		
		options = {}
		options[:verbose] = true if OPTIONS[:verbose]
		options[:output] = OPTIONS[:output] || $stdout
		
		Fingerprint::Scanner.scan_paths(roots, options)
	when :check
		error_count = Fingerprint::Checker.check_files(ARGV[0], ARGV[1])
		exit(error_count > 0 ? 1 : 0)
end
